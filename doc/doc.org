#+TITLE: YAJET -- JavaScript Emplate Tengine
#+STYLE: <link rel="stylesheet" type="text/css" href="docstyle.css" />
#+AUTHOR: Mihai Bazon <mihai.bazon@gmail.com>

* Yet Another JavaScript Emplate Tengine[fn:name]

[fn:name] The misspelling is intentional.  Various combinations of the
letters Y, A, J, T, E from “Yet Another JavaScript Template Engine” led to
the name YAJET.  YAJET stands for “Yet Another JavaScript Emplate Tengine”.
Sounds buzzy, isn't it?  Also, [[http://en.wikipedia.org/wiki/Jet_engine][JET]]-s are fast, and so is YAJET.

A “template engine” is a tool able to transform some text into another, by
interpreting/replacing various patterns in the source text.  YAJET is such a
tool designed for client-side (JavaScript, in-browser) transformation.

YAJET is a compiler, in the sense that it transforms your template into
executable JavaScript code; after compiling a template you get a function
which you can call with data required to fill your template, and it returns
it rendered.

* What makes it different

I long wanted to write my own template tool so that I can “invent” the
syntax.  I believe that what I ended up with is quite nice.  All
special stuff is triggered by a single character (“the reader char”,
which by default is =$=), and simple stuff is kept simple:

  + =$foo= --- insert variable foo
  + =$foo|html= --- insert variable foo, HTML escaped
  + =$$= --- insert a literal dollar sign
  + =${ a() + b() }= --- insert sum of a() and b()
  + =${ a() + b() => html }= --- insert sum of a() and b(), HTML escaped
  + =$(REPEAT (3 => i) <li>Item $i</li> $)= --- display 3 items

Rather than taking pieces of literal JavaScript from your
templates[fn:literaljs], it defines some high-level directives that
allow you to traverse lists, define blocks, conditionals and so on,
and it translates them into running code in a [[Correctness][proper]] way.  So you
don't write, for example:

[fn:literaljs] You can still put literal JavaScript inside using =$(
... )=, but it has to be properly balanced.

#+BEGIN_SRC html
<?js for (var i = 0; i < list.length; ++i) { ?>
<?js     var el = list[i] ?>
     <li>#{el}</li>
<?js } ?>
#+END_SRC

(the example above is from [[http://www.kuwata-lab.com/tenjin/jstenjin-examples.html][Tenjin]]).  In YAJET you write it like this:

#+BEGIN_SRC html
$(MAP (el => list)  <li>$ei</li>  $)
#+END_SRC

Or if you like the Perl style, you can do[fn:perlstyle]: =$(FOREACH (list) <li>$_</li>$)=.

[fn:perlstyle] I added this because it was easy, and it can be useful
for one-liners, but I vote against it for blocks bigger than a few
lines.

There was an explosion of “jQuery template engines” lately, generated
by jQuery's outstanding support for CSS selectors---people[fn:pure]
write <div class="foo"></div> to introduce a DIV containing the
variable =foo=.  I don't like this style.  YAJET is appropriate for
any kind of text templates---it was not designed specifically for
HTML, although that's mostly what I use it for.

[fn:pure] [[http://beebole.com/pure/][Pure]] comes first on Google when we search “JavaScript
template engine”.  Have you notice how exaggeratedly creepy is the syntax for [[http://beebole.com/pure/documentation/iteration-with-directives/][rendering with directives]]?
I guess we truly live in a “worse is better” world, but I'm still trying to do The Right Thing.

* Features

Other than the boring variable interpolation, we have the following:

- simple filters a la [[http://template-toolkit.org/][Template::Toolkit]] (i.e. =$foo|html= will HTML-escape
  the value of foo).

- conditionals (=IF= / =WHEN= / =UNLESS=, =ELSE=, =ELSIF=).

- repetitive constructs (=REPEAT= / =LOOP=).  They allow you to repeat a
  part of the template a few times. =LOOP= is a synonym to =REPEAT=.

- iterating array or hashes (=MAP= and =MAPHASH=) -- =MAP= to traverse a
  list and =MAPHASH= to iterate an object (hash table).

- all loops can be controlled by =BREAK= or =CONTINUE=.

- variable definition (=LET=, =VAR= and =WITH=).  =LET= and =WITH= introduce
  new lexical scopes.

- components (=BLOCK= and =TEMPLATE=).  Useful to declare blocks that
  can be called, multiple times, as a function.

- components can be called using =WRAP=.  They receive some content and are
  able to output something before and after it.

- [[Correctness]].

- it compiles the template into a runnable JavaScript function which is
  blazing fast.

- the code is way shorter than the documentation (~650 lines of code,
  7K minified, 3K gzipped) and it's completely self-contained (no
  library requirements, and it should not clash with any library).  I
  think it's pretty small for the number of features.

- it's browser agnostic.  In fact, it works with standalone JavaScript engines too (such as [[http://code.google.com/p/v8/][Google's V8]]
  or [[http://www.mozilla.org/rhino/][Rhino]]).  I started a test suite based on Rhino.


* Usage

You need to load [[../js/yajet.js][yajet.js]], and to create an instance like this:

#+BEGIN_SRC espresso
var yajet = new YAJET({
    reader_char : "$",
    with_scope  : false,
    filters     : {
        foo: function(val) { /*...*/ },
        bar: function(val) { /*...*/ }
    }
});
#+END_SRC

All arguments are optional.  Then to compile a template, you do this:

#+BEGIN_SRC espresso
var func = yajet.compile("You said: $this.foo $this.bar");
#+END_SRC

and to execute it:

#+BEGIN_SRC espresso
alert( func({ foo: "hello", bar: "world!" }) );
#+END_SRC

** Template arguments

The function *returned* by “yajet.compile” receives one argument, and that
argument is available in your templates via the JavaScript =this= keyword.
This is the default behavior, because I think it's the best one in general,
but if you don't like to use the =this.= prefix to access the members you
can pass =with_scope: true= in the constructor.  It wraps the generated
function in a =with(this) { ... }= block, so the above would become:

#+BEGIN_SRC espresso
var yajet = new YAJET({ with_scope: true });
var func = yajet.compile("You said: $foo $bar");
// and call it the same way:
alert( func({ foo: "hello", bar: "world!" }) );
#+END_SRC

It's more convenient, but it's slower.  How much slower depends on how
big is your template and how many variables there are.  If you want a
comparison for a large number of iterations with and without the
=with= statement, [[../test/with.html][see this file]] (Firebug is required for timing the
operations; watch the Firebug console; it also works in Chrome with
its JavaScript console; Chrome is even slower than Firefox for the
=with= case).

** Reader char

Template syntax is triggered by a special “reader char”.  By default this
character is =$=, but you can use anything else by passing the =reader_char=
constructor argument.  I personally would prefer to use some Unicode
character, for instance:

#+BEGIN_SRC espresso
var yajet = new YAJET({ reader_char: "•" });
var tmpl = yajet.compile("You said •foo •bar");
#+END_SRC


* Syntax

YAJET parses the template as text, leaving it unchanged, until it encounters
the “reader char”.  What follows in this document will assume that $ is the
reader character (the default).  A few types of constructs are recognized:

- =$$= --- inserts a literal $ character.

- =$-= --- kills the following whitespace.

- =$foo= --- inserts the value of the variable foo.

- =${ foo.bar.baz() }= --- evaluates the given JavaScript expression and
  inserts the return value, if any.

- =$(INSTRUCTION ... $)= --- processes the contents according to some rules
  which are particular for INSTRUCTION.

- =$( ... )= --- inserts literal JavaScript code (must not be ill-formed!).

** Simple interpolation (the =$foo= construct)

To insert a variable you can say =$foo=, =$foo.bar=, etc.  This case is
quite simple.  The parser will stop at a character which isn't a letter, a
digit, an underscore or a dollar sign.  Additionally it supports filtering
the values with a convenient syntax: =$foo|html=.

Filters are functions that take one argument and should return the modified
value.  You can easily define your own filters (but later on this).  Filters
can be combined, for example: =$foo|upcase|html= will first make foo
uppercase, then apply the html filter to the upcased string.

** JavaScript expressions (the =${exp}= construct)

This is similar to the “simple interpolation” case, but it allows for more
complicated expressions.  For example =${a+b}= will insert the sum of a and
b.  Your expression can be arbitrarily complex, and the scanner is smart
enough to read it, provided that it is valid JavaScript code (you need to be
*careful about literal RegExp-s* though, for now; I'll fix this in a later
release; more on this in [[Known issues]]).

So, an example of a perfectly valid call is:

#+BEGIN_SRC espresso
${
   // Comments are allowed and can even contain the closing bracket: }
   // it's ignored, since it is in a comment.
   (function(arg){
     return arg.a + arg.b + arg.text;
   })({
     a: 5,
     b: 10,
     text: "(foo}"
   })
}
#+END_SRC

The expression is evaluated at runtime and its value is inserted into the
template output only if it's not null.

*** Filters

As already noted, the =$foo= construct allows filtering the value through
some function using a convenient syntax like =$foo|html=.  At the time of
this writing the filters available by default are:

- =html= --- encodes HTML special characters
- =upcase= --- converts the string to uppercase
- =downcase= --- lowercase the string
- =trim= --- removes leading and trailing whitespace
- =plural= --- useful for returning "no elements", "one element", "3 elements" depending on a numeric value.

You would use “plural” like this:

#+BEGIN_EXAMPLE
1. We got ${ count => plural("no items", "one item", "two items", "# items") }
2. We got ${ count => plural([ "no items", "one item", "two items", "# items" ]) }
3. We got ${ count => plural("no items|one item|two items|# items") }
#+END_EXAMPLE

Besides the implicit argument (=count=) plural accepts multiple
arguments (case 1 above), or a single array argument (case 2) or a
string (case 3) that specifies the formats separated by a pipe
character.  In all cases, the arguments specify how to display the
numeric value.  If it's zero, it selects the first argument; if it's
one, it selects the second, and so on.  If it's bigger than the number
of arguments, it selects the last one.  =#= is replaced with the
number.  So the above displays "We got no items" when count is zero,
"We got one item" when count is 1, "We got two items" when count is 2
and "We got # items" when count is bigger (where # is replaced with the value of count).



It's easy to define custom filters when you construct the YAJET object:

#+BEGIN_SRC espresso
var yajet = new YAJET({
    filters: {
        md5: function(value) {
            return md5_hex_of(value); // return the modified value
        }
    }
});
#+END_SRC

... and in your template: =$password|md5=.

There is also a syntax that allows for filters within the =${exp}=
construct.  But since we parse valid JavaScript code, and since the pipe is
a valid JavaScript character (“bitwise or”), we have to use something
different.  The idea was, thus, that such expressions will be parsed as a
list; the first element of the list is the expression itself, and any
additional elements are filters.  For example:

#+BEGIN_SRC espresso
${ this.getLabel(), upcase, html }
#+END_SRC

will convert into something like this:

#+BEGIN_SRC espresso
output_string(
  apply_html_filter(
    apply_upcase_filter(
      this.getLabel()
    )
  )
)
#+END_SRC

Since the comma doesn't look very nice for this particular case, the “list
reader” also allows a few aliases.  Syntactic sugar, baby!  You can also
use:

- =“=>”=
- =“,”=
- =“..”=
- =“;”=
- =“IN”= (case insensitive, but /must/ be preceded by whitespace)

So the above example can also be written like this:

#+BEGIN_SRC espresso
${ this.getLabel() IN upcase, html }
${ this.getLabel() => upcase => html }
${ this.getLabel() => upcase, html }
${ this.getLabel() .. upcase; html }
#+END_SRC

These special separators only work for the “list reader”, which is used in
the =${exp}=-like constructs (and several others).  Also, note that filters
are only interpreted in the top-level elements of this list, so for instance
the following won't apply the "html" filter to “foo”: =${ something(foo,
html) }=.  It will just call, instead, the function =something=, passing the
variables =foo= and =html=, which is expected behavior.

When used in the =${exp}= construct, filters can receive additional
arguments.  For example, assuming you have some date formatting library, you
can easily define a filter that formats a Date object according to the
arguments:

#+BEGIN_SRC espresso
var yajet = new YAJET({
    filters: {
        format_date: function(date, format) {
            // ... now return the *date* formatted according to *format*
        }
    }
});
#+END_SRC

and in the template:

#+BEGIN_EXAMPLE
“Today is: ${ new Date() => format_date("YYYY-MM-DD") }”
#+END_EXAMPLE

The first argument of your filter is always the value from the template (in
the above case, the Date object created with =new Date()=), and the other
arguments are passed following the filter name ("YYYY-MM-DD").

** Directives

So far we are able to introduce arbitrary JavaScript variables and
expressions in the template.  However that's hardly enough.  First off, the
expressions must be well-formed, so there is no way to start a JavaScript
block somewhere and end it some place else.  The following is invalid for
obvious reasons:

#+BEGIN_SRC html
${ if (link != null) { }
  <a href="$link|html">$link</a>
${ } }
#+END_SRC

I emphasize that the lack of support for partial expressions is a /feature/,
not a limitation.  This will never be “fixed”.  To support constructs like
the above but without encouraging poorly written templates that start a
block on line 10 and end it on line 1000, we have a few special processing
directives.  Let's call these the =$(BAR ... $)= construct.  To start with,
here is how you would write the above code:

#+BEGIN_SRC html
$(IF (link != null)
  <a href="$link|html">$link</a>
$)
#+END_SRC

Note that you still can start a block on one line and end it on another, but
the style is a bit different.  Instead of inserting arbitrary code
unconditionally, we simply end a known construct.  The condition that you
pass to WHEN must be fully valid JavaScript (you cannot pass a partial
expression there) and, if your editor does a good job about matching parens,
then you can quickly see where the block begins/ends by moving the cursor to
the parens.  I prefer this style.

Note that the processing instructions are not case-sensitive.  I prefer to
use UPPERCASE for them so that they stand out visually.

The =$(BAR ... $)= construct has the following properties:

- it starts with =$(= (so it's a normal paren, not a bracket).
- it continues with a special instruction (again, I prefer uppercase for
  this but it's not required).
- depending on the instruction, certain arguments may follow.
- it /should/ end with =$)=.
- it may contain a /block of text/ between the arguments and the =$)=
  terminator.

The /block of text/ is parsed normally, so it's interpreted as plain text
until =$= (the reader char) is encountered, then what follows the reader
char is processed by the rules I described in this document.

Following I will describe the directives available at this time.  I think
the set of them is quite comprehensive and allows you to express any kind of
template in a simple and consistent manner.

*** =IF= / =WHEN= / =UNLESS=, =ELSE= / =ELSIF= --- conditional execution

=IF= and =WHEN= are synonyms, while =UNLESS= is the antonym.  =WHEN= seems more
appropriate for cases where you don't have an =ELSE= clause.  They support one
argument which must be a condition enclosed in parens.  Examples:

#+BEGIN_SRC html
$(WHEN (user_id == null)
  <a href="...">Please login</a> $)

$(UNLESS (user_id != null)
  <a href="...">Please login</a> $)

$(IF (a < b)
  <p>A is smaller</p>
$(ELSIF (a > b))
  <p>B is smaller</p>
$(ELSE)
  <p>A and B are equal</p> $)
#+END_SRC

Note that you can use =ELSE= or =ELSIF= inside =UNLESS= or =WHEN= blocks
too, although I would not advise to use this style:

#+BEGIN_EXAMPLE
$(UNLESS (a == b)
  they are different
$(ELSE)
  they are equal $)
#+END_EXAMPLE

You should also note that =ELSE= and =ELSIF= are not actually parsed like
other instructions.  They don't take a block of text, and thus they don't
need to end with =$)=.  Whether to do it this way was hard to decide, but
since =ELSE= and =ELSIF= normally /continue/ an IF block, instead of ending
it, it seems to make sense this way.  The same applies to =$(BREAK)= and
=$(CONTINUE)= directives.

*** =AIF= / =AWHEN= --- like =IF= / =WHEN=, but store the condition in =$it=

These two come from the [[http://common-lisp.net/project/anaphora/][anaphoric macro collection from Hell]] and I
find them quite useful for cases where the block inside the =IF= is
not very big.  They help with the following case:

#+BEGIN_EXAMPLE
$(LET ((foo => this.looongComputation()))
  $(WHEN (foo)
    ... do something with $foo
  $)
$)
#+END_EXAMPLE

The two [[http://en.wikipedia.org/wiki/Anaphora_(linguistics)][anaphoric]] macros (which are synonyms) allow you to avoid the
boilerplate:

#+BEGIN_EXAMPLE
$(AWHEN (this.looongComputation())
  .. do something with $it
$)
#+END_EXAMPLE

The variable =$it= is created by the macro and takes the value of the
condition, and the text block is executed only if:

- =$it= is not =null= and not =undefined=
- =$it= is not =false= [fn:falsity]
- =$it= is not an empty array

[fn:falsity] BTW, did you know that in JavaScript the expression *(0
== false)* evaluates to *true* in conditionals?

(Note that the JavaScript rules for falsity are different, but I think
the Lisp rules are more useful).  It expands to this code:

#+BEGIN_SRC espresso
(function(it){
  if (it != null && it !== false && !(it instanceof Array && it.length == 0)) {
    // splice the block of code here
  }
}).call(this, this.looongComputation());
#+END_SRC

OK, now that you agree that this is useful, but are depressed by the
sheer lack of inspiration in picking the name =it=, let me show you
that you can actually name the variable:

#+BEGIN_SRC html
$(AWHEN (this.looongComputation() => that)
  <!-- no more $it -->
  .. do something with $that
$)
#+END_SRC

Also, for cases when you are unhappy with the default falsity rules,
you can state the condition as well:

#+BEGIN_EXAMPLE
$(AIF (this.looongComputation() => foo, foo > 5)
  $foo is now this.looongComputation() but this is displayed
  only if it's greater than 5.
$(ELSE)
  And you can still use $foo here.
$)
#+END_EXAMPLE

*** =REPEAT= / =LOOP= --- to repeat stuff

To repeat a part of the template you can use =REPEAT= or =LOOP= (they are
synonyms).  For example, the following outputs “foo” 3 times: =$(REPEAT (3)
foo $)=.  In various cases you might need to know the current iteration too,
so you can pass a variable name for it:

#+BEGIN_EXAMPLE
$(REPEAT (5, i)
  Item $i $)
#+END_EXAMPLE

The variable =i= takes values from 1 to 5 (inclusively) and the output will
be “Item 1 Item 2 ” etc.  In some cases you might want to specify an
interval (so that you start from something else than 1), so the following is
allowed:

#+BEGIN_SRC html
$(LOOP (5 .. 10 => i)
  <a href="/page$i">Page $i</a> $)
#+END_SRC

The =LOOP= keyword seems to be nicer in this case, but again, they are
synonyms.  Also note that the arguments are parsed using the “list reader”,
so you can use syntactic sugar to separate them (although a simple comma
would do).

*** =MAP= / =FOREACH= --- iterate an array

Again, =MAP= and =FOREACH= are synonyms.  You can use them to do something
for each element of an array.  For example the following outputs links
contained in an array:

#+BEGIN_SRC html
$(MAP (link => links)
  <a href="$link.address|html"
     title="$link.tooltip|html">$link.text|html</a> $)
#+END_SRC

That's assuming that =links= is an array of objects, each containing
=address=, =tooltip= and =text=.  You could also use a literal object (the
parser is smart enough for this):

#+BEGIN_SRC html
$(MAP (link => [ { address : "http://www.google.com/",
                   tooltip : "Search engine",
                   text    : "Google" },

                 { address : "http://www.ymacs.org/",
                   tooltip : "AJAX code editor",
                   text    : "Ymacs" }
               ])
  <a href="$link.address|html"
     title="$link.tooltip|html">$link.text|html</a> $)
#+END_SRC

Sometimes you also need to know the current step of the iteration.  For
example if you want to output some links that are separated with a pipe, you
need to know not to output the pipe before the first, or after the last
link.  We could write it like this:

#+BEGIN_SRC html
$(MAP (i, link => links)
  $(WHEN (i > 0) | $)
  <a href="$link.address|html"
     title="$link.tooltip|html">$link.text|html</a> $)
#+END_SRC

or

#+BEGIN_SRC html
$(MAP (i, link => links)
  ${ i > 0 ? "|" : "" }
  <a href="$link.address|html"
     title="$link.tooltip|html">$link.text|html</a> $)
#+END_SRC

A special case of =MAP= / =FOREACH= allows you to pass only the array, and
no key or index variables.  In this case the special variable =$_= (which I
will call the Perlism) gets assigned to the current element, and /more/, the
loop body is lexically scoped to each element using a JavaScript =with=
block (I know, your mom told you not to play the =with= statement, but mine
didn't[fn:with] :-p).

[fn:with] Seriously though, everything under an =with= block is
s...l...o...w... -- so, while this makes for a nice syntax, you should not
use it where speed is critical.

So using this style the first example would become:

#+BEGIN_SRC html
$(MAP (links)
  <a href="$address|html" title="$tooltip|html">$text|html</a> $)
#+END_SRC

=address=, =tooltip= and =text= access the specific property of each
element.

Just a last example showing the Perlism:

#+BEGIN_SRC html
$(FOREACH ([ "foo", "bar", "baz" ]) <b>$_</b> $)
#+END_SRC

will output “<b>foo</b> <b>bar</b> <b>baz</b>”.  The =$_= variable is
bound to each element.  Note that because YAJET is doing [[Correctness][The Right
Thing]], the following will work as expected:

#+BEGIN_EXAMPLE
$(MAP ([ "foo", "bar", "baz" ])
  $(MAP ([ 1, 2, 3 ])
    inside: $_ $)
  outside: $_ $)
#+END_EXAMPLE

When “inside”, =$_= will take the values from 1 to 3; “outside” it
will take "foo", "bar" then "baz".

*** =MAPHASH= --- iterate an object (hash)

=MAPHASH= is =MAP='s analogue for hashes.  It iterates over all properties
of an object, binding a variable for the key and another for the value.  You
must specify names for these variables.  Example, assuming that =users= is a
hash that maps user IDs to some user objects (each of them having a
=getName()= method):

#+BEGIN_SRC html
$(MAPHASH (uid, obj => users)
  User <b>$uid</b> has name <b>${ obj.getName() }</b><br /> $)
#+END_SRC

*** =CONTINUE= and =BREAK= --- for loop control

These don't take any arguments, and also don't take a block of text, so the
expected syntax is =$(CONTINUE)= and =$(BREAK)=.  They can appear in the
text block of some looping construct, be it =REPEAT=, =LOOP=, =MAP=,
=FOREACH= or =MAPHASH=, and they do the same as their JavaScript
counterparts, that is: =CONTINUE= will go to the next iteration, skipping
any code between it and the end of the loop, and =BREAK= will immediately
end the loop.

I'm giving an example just to illustrate the syntax:

#+BEGIN_EXAMPLE
$(REPEAT (10 => i)
  $(WHEN (i > 5) $(BREAK) $)
  $i
$)
#+END_EXAMPLE

The above will print numbers from 1 to 5.

*** =LET= and =VAR= --- define variables

You can define new variables with =LET= and =VAR=.  They are not equivalent:
=LET= introduces a new lexical scope, so the variables that you define are
only available in its block of text.  =VAR= on the other hand does something
similar to the standard JavaScript =var= keyword.  Note that they are /still
not global variables/---they are local to the innermost function that
contains the declaration, which in many cases is your template itself, but
could be a [[reusable template blocks][=BLOCK= or =TEMPLATE=]] block too[fn:var].

[fn:var] =VAR= is only marginally useful.  I would remove it
completely, but it's useful for exporting an inner function from a
=LET= block.

=VAR= does not accept a text argument, so it ends directly with a closing
paren (no need for =$)=).  Example:

#+BEGIN_EXAMPLE
$(VAR ((a => 10) (b => 20)))
$a + $b = ${ a + b }
#+END_EXAMPLE

If variables with the same name were previously defined, they are replaced
with the new ones.

=LET= introduces variables that are local to its block.  If variables with
the same name already exist, they are shadowed while the =LET= block is
in effect.  After the =LET= block ends, previous bindings come back to life.

#+BEGIN_EXAMPLE
$(LET ((a => 10) (b => 20))
  $a + $b = ${ a + b }
$)
#+END_EXAMPLE

Since =LET= takes a block of text, it ends with the normal block terminator
=$)=.  Here's an example to demonstrate scope:

#+BEGIN_EXAMPLE
$(VAR ((x => "outside")))
$(LET ((x => 10))
  $x is 10
  $(LET ((x => 20))
    $x is 20
  $)
  $x is back 10
$)
$x is "outside"
#+END_EXAMPLE

=LET= operates by introducing an anonymous function, so it is compatible
with all browsers.  JavaScript 1.7 introduced a =let= statement for
declaring block-scoped variables, and it's supported by Firefox, but
unfortunately no other browser has it at the moment[fn:no-true-let].

[fn:no-true-let] Since I'm not sure what are the benefits of the =let=
keyword from JavaScript 1.7 compared to using an anonymous function, I
decided not to add a browser check for this.  When more browsers will
support it I'll change my mind.  But the template syntax will remain
the same.

*** =WITH= --- modify the scope chain

When you have an object that has properties you need to access, you can use
a =WITH= block to make for a more convenient syntax, so instead of saying
=$object.foo= you would be able to say only =$foo=.  Assuming that =link=
contains =address=, =tooltip= and =text=, the following two are equivalent:

#+BEGIN_SRC html
<a href="$link.address|html" title="$link.tooltip|html">$link.text|html</a>

$(WITH (link)
  <a href="$address|html" title="$tooltip|html">$text|html</a> $)
#+END_SRC

=WITH= can be used with literal objects as well:

#+BEGIN_EXAMPLE
$(WITH ({ foo: 10, bar: 20 })
  $foo + $bar = ${ foo + bar }
$)
#+END_EXAMPLE

thus emulating a =LET= block, but it's less efficient because it uses the
[[https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Statements/with][JavaScript with statement]].

*** =BLOCK= --- define reusable template blocks

A =BLOCK= doesn't immediately print anything into the template output;
instead it defines a function that returns its processed block of
text.

The syntax is straightforward.  It expects a name for the function,
followed by a list of arguments in parens (if there are no arguments,
put =()= like you do for a plain JavaScript function).  Then continue
with the block of text that the function should expand into:

#+BEGIN_SRC html
$(BLOCK display_link(link)
  <a href="$link.address|html" title="$link.title|html">$link.text|html</a>
$)

<!-- call it literally -->
${ display_link({ address: "/", title: "Home page", text: "Home" }) }

<!-- or call it for an object -->
$(FOREACH (i IN links)
  ${ display_link(i) }
$)
#+END_SRC

Note that the call to =display_link= is inside a =${...}= block, so
that the returned value gets inserted into the output.

Combining =BLOCK= and =LET= or =WITH= we can define closures:

#+BEGIN_SRC html
$(WITH ({ value: 0 })
  $(BLOCK counter()
    <p>Counter is ${ ++value }</p> $) $)

${ counter() } -- now it's 1
${ counter() } -- now it's 2
${ counter() } -- now it's 3
#+END_SRC

Doing the above with =LET= is a bit more tricky because =LET= creates its
own environment, so the =BLOCK= that you define within it is actually local
to the =LET= block.  The following won't work:

#+BEGIN_SRC html
$(LET ((value => 0))
  $(BLOCK counter()
    <p>Counter is ${ ++value }</p> $) $)

${ counter() } -- error, counter is not defined!
#+END_SRC

It's easy to see why if you see the code that gets generated for the above.
It looks like the following:

#+BEGIN_SRC espresso
(function(){
    var value = 0;
    function counter() {
        output("Counter is " + (++value));
    };
})();

output( counter() ); // but there's no free lunch
#+END_SRC

To do this with a =LET= block we would have to export the function; we can
use an outside variable for that:

#+BEGIN_SRC html
$(VAR (counter))
$(LET ((value => 0))
  $( counter = _counter /* export it */ )
  $(BLOCK _counter()
    <p>Counter is ${ ++value }</p> $) $)

${ counter() } -- now it works.
#+END_SRC

# <<WRAP>>
*** =WRAP=, =CONTENT= --- call a wrapper with an additional block of text

=BLOCK= can be used to define wrappers.  A wrapper is a function that
receives a bit of text and puts something before and after it.  For example,
to define a wrapper that creates a table we can say:

#+BEGIN_SRC html
<!-- define our wrapper -->
$(BLOCK table(cols)
  <table>
    <thead>
      <tr>
        $(MAP (label => cols) <td>$label</td> $)
      </tr>
    </thead>
    <tbody>
      $(CONTENT)
    </tbody>
  </table> $)

<!-- and here's how we use it -->
$(WRAP table([ "Name", "Phone", "Email" ])
  <tr> <td>Foo</td> <td>123-1234</td> <td>foo@foo.com</td> </tr>
  <tr> <td>Bar</td> <td>1234-123</td> <td>bar@bar.com</td> </tr>
$)
#+END_SRC

You can note that a wrapper is a normal function (=BLOCK=) and it can
take arguments.  To send the arguments with a =WRAP= block, just make
it look like a normal function call.  If there are no arguments, you
still need to insert the parens =()=.  When it's calling your block,
=WRAP= sends an additional hidden argument that contains the text
which is expanded by =$(CONTENT)=.  For now this argument is a
function that renders the text, and =$(CONTENT)= simply calls this
function.

*** =EXPORT= --- define a BLOCK that can be used in another template

=EXPORT= is like =BLOCK=, but the function that it creates is
“exported” and can be called from different templates.  The assumption
for this to work is that all templates are compiled with the same
YAJET object instance (since it will maintain some runtime environment
for this case).

Here's a quick example:

#+BEGIN_SRC espresso
var yajet = new YAJET();
yajet.compile("$(EXPORT foo(arg) foo got $arg $)");
var t1 = yajet.compile("$(IMPORT (foo)) ${ foo('bar') }");
var t2 = yajet.compile("$(PROCESS foo('baz'))");
alert(t1()); // displays "foo got bar"
alert(t2()); // displays "foo got baz"
#+END_SRC

You can see above two ways of calling an exported block.  One is by
calling =$(IMPORT (block_name))= first, which will actually make it
available as a local function, which you can use as if it were defined
with =BLOCK=.  The second way is using =$(PROCESS block_name())=.
=PROCESS= expects that the name of the block that you type there is a
function created with =EXPORT= and compiled /before/ the call to
=PROCESS=.

It might be important to understand that compile() actually runs your
template once when it contains =EXPORT=-ed functions, so that they get
into the YAJET instance.  This shouldn't be a problem---in practice,
you will have templates that contain /only/ export blocks, where you
will put utilities.  For example, above we don't store the result of
yajet.compile for the first template, since all it does is just export
the function.  The exported function gets into the YAJET object
instance.

Some notes:

 - /the order/ in which you compile the templates is not important.
   However, when you /execute/ a template you must make sure that any
   dependencies were /already compiled/.

 - there is no namespace support, so make sure that you don't export a
   block with the same name in two templates.  Typically, the second
   will overwrite the first (depending on the compilation order), but
   you get no warning.

 - within the template where they are defined, you can use exported
   blocks as if they were local.  They can call each other if needed,
   they can $(WRAP) each other, etc.

 - if you need to call a block defined in another template as a
   WRAPper, you need to $(IMPORT) it first.  Otherwise it's the same
   as described in [[WRAP]].

*** Literal JavaScript with =$( ... )=

Finally, you can include literal JavaScript code, if needed, by
placing a space after the open bracket.  The code inside =$( ... )=
must be valid JavaScript and by this I mean properly balanced (you
cannot open a paren in such a block and close it in another).

For example, if you need to change the value of some variable which is
already defined, you can do this:

#+BEGIN_EXAMPLE
$( myVar = doSomething() )
  ^-- note this space.
#+END_EXAMPLE

Unlike a =${ ... }= block, which would allow the above code as well,
this one won't place the result into the template output.  Also,
unlike a =${ ... }= block, this one allows multiple statements
separated with a semicolon:

#+BEGIN_EXAMPLE
$( foo = "bar";
   someSideEffects();
   i = 10 )
#+END_EXAMPLE

# <<Correctness>>
* Correctness

YAJET aims to do The Right Thing.  If you've ever written Lisp or C macros,
then you know that it's dangerous to invent variable names, or to use a
macro argument more than once.  YAJET is essentially a macro expander and
it's built around these good principles.

For example, a dumb implementation would translate =$(FOREACH (link => links)
...STUFF... $)= into this:

#+BEGIN_SRC espresso
for (var i = 0; i < links.length; ++i) {
    var link = links[i];
    // ... do STUFF
}
#+END_SRC

However the above code has two problems:

1. if the text in =STUFF= defines a variable named =i=, then it will collide
   with the loop variable.

2. if =links= is not a real array, but say, a (possibly expensive, and
   perhaps with weird side effects) function call that returns an array,
   then it will be called for each iteration... twice.

If =FOREACH= would really expand into the above code, then the following
sample would suffer from both problems:

#+BEGIN_EXAMPLE
$(FOREACH (link => this.getLinksFromServer())
  $(VAR ((i => link.text.length)))
  $(WHEN (i > 30)
    ... truncate text
  $)
  ...
$)
#+END_EXAMPLE

The resulted code would be:

#+BEGIN_SRC espresso
for (var i = 0; i < this.getLinksFromServer().length; ++i) {
  var link = this.getLinksFromServer()[i];
  var i = link.text.length;
  if (i > 30) {
    ... truncate text
  }
  ...
}
#+END_SRC

... which means that this.getLinksFromServer() will be called twice for each
step, and also that the loop would be stopped arbitrarily when we encounter
a link whose text has more characters than the number of links.  That would
break in unexpected and hard to debug ways.

What YAJET actually generates for the above case looks like this:

#+BEGIN_SRC espresso
(function(__GSY12){
  for (var __GSY13 = __GSY12.length, __GSY14 = 0; __GSY14 < __GSY13; ++__GSY14) {
    var link = __GSY12[__GSY14];
    var i = link.length;
    if (i > 30) {
      ... truncate text
    }
    ...
  }
}).call(this, this.getLinksFromServer());
#+END_SRC

The variables that aren't explicitly named in the template get unique
names with the prefix =__GSY=, so you should be safe as long as you
don't use the =__GSY= prefix yourself.  Hope you don't. :-)

Also, the loop block is embedded in a function, so that it doesn't
affect outside variables.








# <<Known issues>>
* Known issues

** Literal RegExp-s in JavaScript expressions

The JavaScript scanner is not “complete”, although it's smart enough to skip
comments and strings while looking for a closing paren.  Literal regexps are
always tricky to parse, so I left this out for now, but I do plan to fix it.
However, what this means for now is that you should be careful about parens
in literal RegExp-s.  Since the parser does not allow for unbalanced parens,
the following should /not/ be a problem:

#+BEGIN_SRC espresso
$( if (/(a|b)/.test("bar")) {
     matches();
   } else {
     no_match();
   }
 )
#+END_SRC

All parens are properly closed, so there's no reason why our parser should
miss the closing paren.  However, the following will break stuff:

#+BEGIN_SRC espresso
$( if (/\)/.test(")")) { ... } )
#+END_SRC

Although it is valid JavaScript inside, having the closing paren in the
RegExp will confuse YAJET.  It looks quite ugly, too---for such cases,
encode the paren as =\x29=.  Note that you have to escape open parens as
well (=\x28=), and same goes for all the other types of brackets such as
=[=, =]=,  ={= and =}=.

** Error reporting is less than ideal

** Whitespace handling

Currently YAJET keeps all whitespace in the generated source.  There is a
directive that allows you to say “kill following whitespace” (=$-=, that is,
the reader char followed by a minus sign) but it's not very convenient.
What should probably be done is that it should, by default, eat all
whitespace that occurs on lines which don't include literal text.  For
example the following:

#+BEGIN_SRC html
<p>
$(IF (true)
  foo
$(ELSE)
  bar
$)
</p>
#+END_SRC

results in this output:

#+BEGIN_SRC html
<p>

  foo

</p>
#+END_SRC

Generally, it's not what one would expect.  What's worse, we can make it
look better but it's totally unintuitive:

#+BEGIN_SRC html
<p>$-
$(IF (true)
  foo$-
$(ELSE)
  bar$-
$)
</p>
#+END_SRC

This outputs better:

#+BEGIN_SRC html
<p>
  foo
</p>
#+END_SRC

So the default behavior should probably be:

- if a line starts with whitespace followed by a directive, the whitespace
  should be eaten.

- if a line ends with a block close paren (=$)=) followed only by
  whitespace, then that whitespace + the newline will be eaten.

Need to think about it a bit more.  However, fortunately in HTML whitespace
is not too important.

* How to get help

If you have any questions please post them on the [[http://groups.google.com/group/yajet][YAJET Google Group]].

* License

Copyright (c) 2010, [[http://mihai.bazon.net/blog][Mihai Bazon]], Dynarch.com.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of Dynarch.com nor the names of its contributors may
      be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
